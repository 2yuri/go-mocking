// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/car_storage.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	domain "mock-testing/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCarStorage is a mock of CarStorage interface.
type MockCarStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCarStorageMockRecorder
}

// MockCarStorageMockRecorder is the mock recorder for MockCarStorage.
type MockCarStorageMockRecorder struct {
	mock *MockCarStorage
}

// NewMockCarStorage creates a new mock instance.
func NewMockCarStorage(ctrl *gomock.Controller) *MockCarStorage {
	mock := &MockCarStorage{ctrl: ctrl}
	mock.recorder = &MockCarStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarStorage) EXPECT() *MockCarStorageMockRecorder {
	return m.recorder
}

// GetCar mocks base method.
func (m *MockCarStorage) GetCar() ([]domain.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCar")
	ret0, _ := ret[0].([]domain.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCar indicates an expected call of GetCar.
func (mr *MockCarStorageMockRecorder) GetCar() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCar", reflect.TypeOf((*MockCarStorage)(nil).GetCar))
}

// SaveCar mocks base method.
func (m *MockCarStorage) SaveCar(car *domain.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCar", car)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCar indicates an expected call of SaveCar.
func (mr *MockCarStorageMockRecorder) SaveCar(car interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCar", reflect.TypeOf((*MockCarStorage)(nil).SaveCar), car)
}
